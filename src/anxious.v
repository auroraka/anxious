
//=======================================================
//	This code is generated by Terasic System Builder
//=======================================================

module anxious(

	//////////// CLOCK //////////
	CLOCK_50,	// BANK 4
	CLOCK2_50,	// BANK 7
	CLOCK3_50,	// BANK 3A

	//////////// LED (High Active) //////////
	LEDG,
	LEDR,

	//////////// KEY (Active Low) //////////
	KEY,

	//////////// SW //////////
	SW,

	//////////// SEG7 (Low Active) //////////
	HEX0,
	HEX1,
	HEX2,
	HEX3,
	HEX4,
	HEX5,
	HEX6,
	HEX7,

	//////////// LCD //////////
	LCD_DATA,
	LCD_EN,
	LCD_ON,
	LCD_RS,
	LCD_RW,

	//////////// SDCARD //////////
	SD_CLK,
	SD_CMD,
	SD_DAT,
	SD_WP_N,

	//////////// VGA //////////
	VGA_B,
	VGA_BLANK_N,
	VGA_CLK,
	VGA_G,
	VGA_HS,
	VGA_R,
	VGA_SYNC_N,
	VGA_VS,

	//////////// IR Receiver //////////
	IRDA_RXD,

	//////////// SDRAM //////////
	DRAM_ADDR,
	DRAM_BA,
	DRAM_CAS_N,
	DRAM_CKE,
	DRAM_CLK,
	DRAM_CS_N,
	DRAM_DQ,
	DRAM_DQM,
	DRAM_RAS_N,
	DRAM_WE_N,

	//////////// GPIO, GPIO connect to GPIO Default //////////
	GPIO,

	//////////// Fan Control //////////
	FAN_CTRL
);

//=======================================================
//	PARAMETER declarations
//=======================================================


//=======================================================
//	PORT declarations
//=======================================================

//////////// CLOCK //////////
input						CLOCK_50;
input						CLOCK2_50;
input						CLOCK3_50;

//////////// LED (High Active) //////////
output			 [8:0]		LEDG;
output			[17:0]		LEDR;

//////////// KEY (Active Low) //////////
input			 [3:0]		KEY;

//////////// SW //////////
input			[17:0]		SW;

//////////// SEG7 (Low Active) //////////
output			 [6:0]		HEX0;
output			 [6:0]		HEX1;
output			 [6:0]		HEX2;
output			 [6:0]		HEX3;
output			 [6:0]		HEX4;
output			 [6:0]		HEX5;
output			 [6:0]		HEX6;
output			 [6:0]		HEX7;

//////////// LCD //////////
inout			 [7:0]		LCD_DATA;
output						LCD_EN;
output						LCD_ON;
output						LCD_RS;
output						LCD_RW;

//////////// SDCARD //////////
output						SD_CLK;
inout						SD_CMD;
inout			 [3:0]		SD_DAT;
input						SD_WP_N;

//////////// VGA //////////
output			 [7:0]		VGA_B;
output						VGA_BLANK_N;
output						VGA_CLK;
output			 [7:0]		VGA_G;
output						VGA_HS;
output			 [7:0]		VGA_R;
output						VGA_SYNC_N;
output						VGA_VS;

//////////// IR Receiver //////////
input						IRDA_RXD;

//////////// SDRAM //////////
output			[12:0]		DRAM_ADDR;
output			 [1:0]		DRAM_BA;
output						DRAM_CAS_N;
output						DRAM_CKE;
output						DRAM_CLK;
output						DRAM_CS_N;
inout			[31:0]		DRAM_DQ;
output			 [3:0]		DRAM_DQM;
output						DRAM_RAS_N;
output						DRAM_WE_N;

//////////// GPIO, GPIO connect to GPIO Default //////////
inout			[0:35]		GPIO;

//////////// Fan Control //////////
inout						FAN_CTRL;


//=======================================================
//	REG/WIRE declarations
//=======================================================




//=======================================================
//	Structural coding
//=======================================================



	//////////// FAN Control //////////
assign FAN_CTRL = SW[0]; // turn off FAN

wire clk_camera;
wire clk_qsys;
wire clk_vga;

cam_pll U_cam_pll (
	.inclk0 (CLOCK_50),
	.c0     (clk_camera),
	.c1     (clk_qsys),
	.c2     (DRAM_CLK),
	.c3     (clk_vga)
);

function [6:0] seg7;
	input [3:0] hex;
	begin
		case (hex)
			4'd0: seg7 = 7'b1000000;
			4'd1: seg7 = 7'b1111001;
			4'd2: seg7 = 7'b0100100;
			4'd3: seg7 = 7'b0110000;
			4'd4: seg7 = 7'b0011001;
			4'd5: seg7 = 7'b0010010;
			4'd6: seg7 = 7'b0000010;
			4'd7: seg7 = 7'b1111000;
			4'd8: seg7 = 7'b0000000;
			4'd9: seg7 = 7'b0011000;
			4'd10: seg7 = 7'b0001000;
			4'd11: seg7 = 7'b0000011;
			4'd12: seg7 = 7'b1000110;
			4'd13: seg7 = 7'b0100001;
			4'd14: seg7 = 7'b0000110;
			4'd15: seg7 = 7'b0001110;
			default: seg7 = 7'b1000000;
		endcase
	end
endfunction

reg [19:0] black_cnt;
assign HEX4 = seg7(black_cnt[19:16]);
assign HEX3 = seg7(black_cnt[15:12]);
assign HEX2 = seg7(black_cnt[11:8]);
assign HEX1 = seg7(black_cnt[7:4]);
assign HEX0 = seg7(black_cnt[3:0]);

anxious_qsys U_sys (
	.camera_mm_0_conduit_clk_camera    (clk_camera),  //         camera_mm_0_conduit.clk_camera
	.camera_mm_0_conduit_enable_n      (SW[1]),       //                            .enable_n
	.camera_mm_0_conduit_cam_din       (GPIO[26:33]), //                            .cam_din
	.camera_mm_0_conduit_cam_href      (GPIO[23]),    //                            .cam_href
	.camera_mm_0_conduit_cam_pclk      (GPIO[24]),    //                            .cam_pclk
	.camera_mm_0_conduit_cam_pwdn      (GPIO[35]),    //                            .cam_pwdn
	.camera_mm_0_conduit_cam_reset     (GPIO[34]),    //                            .cam_reset
	.camera_mm_0_conduit_cam_vsync     (GPIO[22]),    //                            .cam_vsync
	.camera_mm_0_conduit_cam_xclk      (GPIO[25]),    //                            .cam_xclk
	.clk_clk                           (clk_qsys),    //                         clk.clk
	.led_export                        (LEDG[0]),     //                         led.export
	.new_sdram_controller_0_wire_addr  (DRAM_ADDR),   // new_sdram_controller_0_wire.addr
	.new_sdram_controller_0_wire_ba    (DRAM_BA),     //                            .ba
	.new_sdram_controller_0_wire_cas_n (DRAM_CAS_N),  //                            .cas_n
	.new_sdram_controller_0_wire_cke   (DRAM_CKE),    //                            .cke
	.new_sdram_controller_0_wire_cs_n  (DRAM_CS_N),   //                            .cs_n
	.new_sdram_controller_0_wire_dq    (DRAM_DQ),     //                            .dq
	.new_sdram_controller_0_wire_dqm   (DRAM_DQM),    //                            .dqm
	.new_sdram_controller_0_wire_ras_n (DRAM_RAS_N),  //                            .ras_n
	.new_sdram_controller_0_wire_we_n  (DRAM_WE_N),   //                            .we_n
	.reset_reset_n                     (KEY[0]),      //                       reset.reset_n
	.vga_mm_0_conduit_vga_b            (VGA_B),       //            vga_mm_0_conduit.vga_b
	.vga_mm_0_conduit_vga_blank_n      (VGA_BLANK_N), //                            .vga_blank_n
	.vga_mm_0_conduit_vga_clk          (VGA_CLK),     //                            .vga_clk
	.vga_mm_0_conduit_vga_g            (VGA_G),       //                            .vga_g
	.vga_mm_0_conduit_vga_hs           (VGA_HS),      //                            .vga_hs
	.vga_mm_0_conduit_vga_r            (VGA_R),       //                            .vga_r
	.vga_mm_0_conduit_vga_sync_n       (VGA_SYNC_N),  //                            .vga_sync_n
	.vga_mm_0_conduit_vga_vs           (VGA_VS),      //                            .vga_vs
	.vga_mm_0_conduit_clk_vga          (clk_vga),     //                            .clk_vga
	.frame_buffer_switcher_0_enable_enable (SW[2]), // frame_buffer_switcher_0_enable.enable
	.camera_mm_0_black_cnt_readdata    (black_cnt)  //          camera_mm_0_black_cnt.readdata
);

endmodule
